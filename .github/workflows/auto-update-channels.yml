name: 自动更新IPTV频道列表

on:
  schedule:
    - cron: '0 22 * * *'  # 每天22:00 UTC执行
    - cron: '0 8 * * *'   # 每天08:00 UTC执行
  workflow_dispatch:      # 允许手动触发

jobs:
  update-channels:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # 允许推送到仓库
      actions: read      # 允许读取actions
    defaults:
      run:
        working-directory: ./Parser
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    

    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: 安装依赖包
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install requests beautifulsoup4 lxml
        fi
    
    - name: 显示环境信息
      run: |
        echo "Python版本: $(python --version)"
        echo "当前目录内容:"
        ls -la
    
    - name: 检查必要文件
      run: |
        echo "检查必要文件..."
        for file in LiveChannel.txt modular_batch_processor.py searcher_interface.py tonkiang_searcher.py run_processor.py; do
          if [ ! -f "$file" ]; then
            echo "❌ 缺少文件: $file"
            exit 1
          else
            echo "✅ 找到文件: $file"
          fi
        done
    
    - name: 备份原始文件
      run: |
        if [ -f result.txt ]; then
          cp result.txt result_backup.txt
          echo "✅ 已备份 result.txt"
        else
          echo "ℹ️ result.txt 不存在，跳过备份"
        fi
    
    - name: 执行频道搜索
      run: |
        echo "🚀 开始执行频道搜索..."
        echo "开始时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "GitHub Runner IP信息:"
        curl -s https://httpbin.org/ip || echo "无法获取IP信息"
        echo ""
        
        # 方案：使用不同的GitHub Runner位置
        echo "🌍 尝试使用不同地区的GitHub Runner"
        
        # 显示当前Runner的详细信息
        echo "📍 当前Runner信息:"
        echo "   - IP: $(curl -s https://httpbin.org/ip 2>/dev/null | grep -o '"origin": "[^"]*"' | cut -d'"' -f4 || echo 'unknown')"
        echo "   - 时区: $(date)"
        echo "   - DNS: $(nslookup tonkiang.us 2>/dev/null | grep 'Address:' | tail -1 || echo 'DNS解析失败')"
        
        # 尝试通过不同的DNS解析
        echo "🔄 尝试不同的DNS解析策略"
        
        # 方法1: 直接IP访问（绕过DNS）
        echo "🎯 方法1: 尝试直接IP访问..."
        TARGET_IP=$(nslookup tonkiang.us 8.8.8.8 2>/dev/null | grep 'Address:' | tail -1 | awk '{print $2}' || echo "")
        
        if [ -n "$TARGET_IP" ]; then
          echo "   获取到IP: $TARGET_IP"
          export TARGET_HOST_IP="$TARGET_IP"
          export SEARCH_DELAY=2
          export MAX_WORKERS=1
          export RETRY_DELAY=15
          
          if timeout 900 python run_processor.py; then
            echo "✅ 直接IP访问成功！"
            exit 0
          else
            echo "❌ 直接IP访问失败"
          fi
        fi
        
        # 方法2: 使用不同的User-Agent策略
        echo "🎯 方法2: 移动端User-Agent伪装..."
        export MOBILE_MODE=true
        export SEARCH_DELAY=8
        export MAX_WORKERS=1
        export RETRY_DELAY=25
        
        if timeout 900 python run_processor.py; then
          echo "✅ 移动端伪装成功！"
          exit 0
        else
          echo "❌ 移动端伪装失败"
        fi
        
        # 方法3: 极限保守策略
        echo "🎯 方法3: 极限保守策略（单线程+长延迟）..."
        export SEARCH_DELAY=15
        export MAX_WORKERS=1
        export RETRY_DELAY=45
        
        if timeout 1200 python run_processor.py; then
          echo "✅ 保守策略成功！"
          exit 0
        else
          echo "❌ 所有方法均失败"
          echo "💡 建议: GitHub Actions环境可能被永久拉黑"
          echo "💡 解决方案: 考虑使用自托管Runner或本地定时任务"
          exit 1
        fi
        
        echo "✅ 搜索阶段完成"
    
    - name: 检查结果文件并验证质量
      id: check_result
      run: |
        if [ ! -f result.txt ]; then
          echo "❌ result.txt 文件未生成"
          exit 1
        fi
        if [ ! -s result.txt ]; then
          echo "❌ result.txt 文件为空"
          exit 1
        fi
        
        line_count=$(wc -l < result.txt)
        file_size=$(du -h result.txt | cut -f1)
        group_count=$(grep -c "^[^,]*,$" result.txt 2>/dev/null || echo "0")
        
        # 计算有效频道链接数（排除分组标题行）
        valid_channel_count=$(grep -v "^[^,]*,$" result.txt | wc -l 2>/dev/null || echo "0")
        
        # 确保变量值不为空
        line_count=${line_count:-0}
        file_size=${file_size:-"0B"}
        group_count=${group_count:-0}
        valid_channel_count=${valid_channel_count:-0}
        
        echo "📊 结果统计: 总行数=$line_count, 文件大小=$file_size, 分组数=$group_count, 有效频道=$valid_channel_count"
        
        # 质量检查标准
        MIN_CHANNELS=10  # 最少10个有效频道就行
        MIN_GROUPS=2     # 最少2个分组
        
        echo "🔍 质量检查标准（降低要求）"
        
        echo "🔍 质量检查..."
        echo "- 有效频道数: $valid_channel_count (最低要求: $MIN_CHANNELS)"
        echo "- 分组数: $group_count (最低要求: $MIN_GROUPS)"
        
        # 检查是否满足最低要求
        if [ "$valid_channel_count" -lt "$MIN_CHANNELS" ]; then
          echo "❌ 有效频道数不足 ($valid_channel_count < $MIN_CHANNELS)，跳过提交"
          echo "QUALITY_CHECK=false" >> $GITHUB_ENV
          exit 0
        fi
        
        if [ "$group_count" -lt "$MIN_GROUPS" ]; then
          echo "❌ 分组数不足 ($group_count < $MIN_GROUPS)，跳过提交"
          echo "QUALITY_CHECK=false" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "✅ 质量检查通过"
        echo "QUALITY_CHECK=true" >> $GITHUB_ENV
        echo "VALID_CHANNELS=$valid_channel_count" >> $GITHUB_ENV
        echo "GROUPS=$group_count" >> $GITHUB_ENV
    
    - name: 检查文件变化
      id: check_changes
      if: env.QUALITY_CHECK == 'true'
      run: |
        has_changes="false"
        if [ ! -f result_backup.txt ]; then
          echo "ℹ️ 首次运行"
          has_changes="true"
        else
          if ! cmp -s result.txt result_backup.txt; then
            echo "🔄 文件有变化"
            has_changes="true"
          else
            echo "ℹ️ 文件无变化"
          fi
        fi
        echo "HAS_CHANGES=$has_changes" >> $GITHUB_ENV
    
    - name: 配置Git
      if: env.QUALITY_CHECK == 'true' && env.HAS_CHANGES == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: 提交更新
      if: env.QUALITY_CHECK == 'true' && env.HAS_CHANGES == 'true'
      run: |
        cd ..
        git add Parser/result.txt
        current_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        # 使用已验证的统计信息
        git commit -m "🔄 自动更新IPTV频道列表 - $current_time" -m "✅ 质量检查通过" -m "有效频道: ${VALID_CHANNELS} 个" -m "频道分组: ${GROUPS} 个"
        git push
        echo "✅ 更新已提交"
    
    - name: 质量检查失败处理
      if: env.QUALITY_CHECK == 'false'
      run: |
        echo "⚠️ 本次更新未提交，原因："
        echo "- 解析到的有效频道数或分组数不足"
        echo "- 建议检查搜索器状态或网络连接"
        echo "- 下次定时任务将重新尝试"
        exit 0

env:
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
