name: 自动更新IPTV频道列表

on:
  # 定时执行 - 每天北京时间06:00和16:00执行
  schedule:
    - cron: '0 22 * * *'  # UTC 22:00 (北京时间06:00)
    - cron: '0 8 * * *'   # UTC 08:00 (北京时间16:00)
  
  # 支持手动触发
  workflow_dispatch:
  
  # 代码推送时也可以触发（可选）
  # push:
  #   branches: [ main ]

jobs:
  update-channels:
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: 检出仓库代码
      uses: actions/checkout@v4
      with:
        # 需要完整的git历史来进行提交
        fetch-depth: 0
        # 使用GitHub Token确保有提交权限
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # 设置Python环境
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    # 安装依赖
    - name: 安装Python依赖
      run: |
        echo "📦 安装Python依赖包..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 检查输入文件
    - name: 检查输入文件
      run: |
        echo "🔍 检查输入文件..."
        if [ ! -f "LiveChannel.txt" ] && [ ! -f "livechannel.txt" ]; then
          echo "❌ 错误：未找到输入文件 LiveChannel.txt 或 livechannel.txt"
          exit 1
        fi
        
        if [ -f "LiveChannel.txt" ]; then
          echo "✅ 找到输入文件：LiveChannel.txt"
          wc -l LiveChannel.txt
        elif [ -f "livechannel.txt" ]; then
          echo "✅ 找到输入文件：livechannel.txt"
          wc -l livechannel.txt
        fi
    
    # 执行频道搜索
    - name: 执行IPTV频道搜索
      run: |
        echo "🚀 开始执行IPTV频道搜索..."
        echo "⏰ 开始时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "✨ 特色功能: 智能验证 + 域名频率排序 + 自动时间戳"
        echo "📝 新功能: 自动在第一个频道前添加更新时间频道"
        echo ""
        
        # 执行主程序
        python modular_batch_processor.py
        
        echo "⏰ 结束时间: $(date '+%Y-%m-%d %H:%M:%S')"
        
        # 检查输出文件
        if [ -f "result.txt" ]; then
          echo "✅ 搜索完成，生成结果文件 result.txt"
          echo "📊 文件大小: $(du -h result.txt | cut -f1)"
          echo "📊 链接数量: $(grep -c ',' result.txt || echo '0')"
          
          # 显示结果文件的前10行作为预览
          echo "📖 结果预览（前10行）:"
          head -10 result.txt
        else
          echo "❌ 错误：未生成结果文件 result.txt"
          exit 1
        fi
    
    # 检查文件是否有变化
    - name: 检查文件变化
      id: check_changes
      run: |
        echo "🔍 检查文件是否有变化..."
        
        # 检查git状态
        git status --porcelain
        
        # 如果result.txt有变化
        if [ -n "$(git status --porcelain result.txt 2>/dev/null)" ]; then
          echo "✅ result.txt 有更新"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # 显示变化的统计信息
          if [ -f "result.txt" ]; then
            echo "📊 更新后的统计信息:"
            echo "  - 文件大小: $(du -h result.txt | cut -f1)"
            echo "  - 总行数: $(wc -l < result.txt)"
            echo "  - 链接数量: $(grep -c 'http' result.txt || echo '0')"
            echo "  - 频道分组: $(grep -c '#genre#' result.txt || echo '0')"
          fi
        else
          echo "ℹ️  result.txt 无变化，跳过提交"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
    
    # 提交更新
    - name: 提交更新的频道列表
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "💾 提交更新的频道列表..."
        
        # 配置git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加并提交变化
        git add result.txt
        
        # 获取当前时间用于提交信息
        current_time=$(date '+%Y-%m-%d %H:%M:%S UTC')
        commit_message="🔄 自动更新IPTV频道列表 - ${current_time}"
        
        # 添加统计信息到提交消息
        if [ -f "result.txt" ]; then
          link_count=$(grep -c 'http' result.txt || echo '0')
          group_count=$(grep -c '#genre#' result.txt || echo '0')
          commit_message="${commit_message}

📊 更新统计:
- 频道分组: ${group_count} 个  
- 有效链接: ${link_count} 个
- 文件大小: $(du -h result.txt | cut -f1)
- 更新时间: ${current_time}"
        fi
        
        git commit -m "${commit_message}"
        
        echo "✅ 提交完成"
    
    # 推送到远程仓库
    - name: 推送到GitHub仓库
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🚀 推送到GitHub仓库..."
        git push
        echo "✅ 推送完成"
    
    # 任务完成通知
    - name: 任务完成通知
      if: always()
      run: |
        echo "==================== 任务执行完成 ===================="
        echo "📅 执行日期: $(date '+%Y-%m-%d')"
        echo "⏰ 执行时间: $(date '+%H:%M:%S UTC')"
        echo "🔄 执行状态: ${{ job.status }}"
        
        if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
          echo "✅ 状态: 频道列表已更新并提交"
          if [ -f "result.txt" ]; then
            echo "📊 最终统计:"
            echo "  - 链接数量: $(grep -c 'http' result.txt || echo '0')"
            echo "  - 频道分组: $(grep -c '#genre#' result.txt || echo '0')"
          fi
        else
          echo "ℹ️  状态: 频道列表无变化，未执行提交"
        fi
        echo "=================================================="

    # 错误处理和清理（可选）
    - name: 错误处理和清理
      if: failure()
      run: |
        echo "❌ 任务执行失败，进行错误处理..."
        
        # 显示错误信息
        echo "📋 当前目录文件:"
        ls -la
        
        # 显示git状态
        echo "📋 Git状态:"
        git status
        
        # 如果有部分生成的结果文件，显示其内容
        if [ -f "result.txt" ]; then
          echo "📋 部分结果文件内容:"
          head -20 result.txt
        fi
        
        echo "💡 请检查日志以了解失败原因"
